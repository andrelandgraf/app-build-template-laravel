---
description: 
globs: 
alwaysApply: true
---
# Laravel Coding Guidelines

## Backend Architecture & Laravel Patterns

**1. Laravel Framework Standards**
- Use Laravel 11+ features including modern `casts()` method syntax instead of `$casts` property
- Implement proper type hints for all method parameters and return types (`Response`, `RedirectResponse`, etc.)
- Follow Laravel's naming conventions strictly (PascalCase for classes, camelCase for methods, snake_case for database fields)
- Use Laravel's built-in validation, authentication, and authorization systems
- Implement proper error handling with custom exception classes when needed

**2. Controller Structure**
- Keep controllers thin and focused on HTTP concerns only
- Use Form Request classes for complex validation logic (`ProfileUpdateRequest`)
- Return proper response types (`Inertia\Response` for renders, `RedirectResponse` for redirects)
- Group related functionality in subdirectories (`Settings/`, `Auth/`)
- Use resource controllers and route model binding where appropriate

**3. Model Best Practices**
- Use modern Laravel model patterns with proper docblocks (`@use HasFactory<\Database\Factories\UserFactory>`)
- Implement proper `$fillable` and `$hidden` arrays for mass assignment protection
- Use the modern `casts()` method for attribute casting
- Follow single responsibility principle - one model per database table
- Use Eloquent relationships properly with correct type hints

**4. Database & Migrations**
- Use descriptive migration names with timestamps
- Implement proper foreign key constraints and indexes
- Use Laravel's schema builder methods consistently
- Keep migrations atomic and reversible
- Use database factories for testing data

## Frontend Integration & Modern Stack

**5. Inertia.js Integration**
- Use Inertia for seamless SPA experience without API complexity
- Implement proper data sharing through `HandleInertiaRequests` middleware
- Enable and configure Server-Side Rendering (SSR) for better SEO and performance
- Use Ziggy for type-safe routing in JavaScript
- Share only necessary data to avoid over-fetching

**6. React/TypeScript Standards**
- Use TypeScript for all frontend code with proper type definitions
- Implement component composition patterns with Radix UI primitives
- Use modern React patterns (hooks, function components, proper state management)
- Follow accessibility best practices with ARIA attributes
- Implement proper error boundaries and loading states

**7. Styling & UI Components**
- Use Tailwind CSS v4 with proper utility classes and custom properties
- Implement design system with reusable components using shadcn/ui patterns
- Use `class-variance-authority` for component variants
- Implement proper responsive design with mobile-first approach
- Use CSS custom properties for theming (light/dark mode support)

## Development Tools & Workflow

**8. Testing Requirements**
- Use Pest PHP for expressive testing syntax
- Implement feature tests for all user-facing functionality
- Write unit tests for complex business logic
- Use factories for test data generation
- Maintain high test coverage with meaningful assertions

**9. Code Quality & Formatting**
- Use Laravel Pint for PHP code formatting
- Implement ESLint and Prettier for JavaScript/TypeScript
- Use proper import organization with `prettier-plugin-organize-imports`
- Follow PSR-12 coding standards for PHP
- Implement proper error handling and logging

**10. Build Tools & Performance**
- Use Vite for fast development and optimized builds
- Implement proper asset versioning and caching
- Use dynamic imports for code splitting
- Optimize images and assets for web delivery
- Implement proper caching strategies (Redis, file cache)

## Security & Best Practices

**11. Authentication & Authorization**
- Use Laravel's built-in authentication with proper middleware
- Implement CSRF protection on all forms
- Use proper password hashing and verification
- Implement email verification for new accounts
- Use rate limiting for sensitive endpoints

**12. Data Validation & Sanitization**
- Use Form Request classes for complex validation
- Implement proper input sanitization
- Use Laravel's validation rules consistently
- Handle file uploads securely with proper validation
- Implement proper API rate limiting

## Deployment & Production

**13. Environment Configuration**
- Use environment variables for all configuration
- Implement proper logging with structured logs
- Use queue workers for background processing
- Implement proper error tracking and monitoring
- Use application performance monitoring (APM)

**14. Performance Optimization**
- Implement proper database indexing
- Use eager loading to prevent N+1 queries
- Implement caching at multiple levels
- Optimize images and static assets
- Use CDN for asset delivery

## Modern Development Practices

**15. Package Management**
- Use Composer for PHP dependencies with proper version constraints
- Use npm/yarn for JavaScript dependencies
- Keep dependencies updated and secure
- Use lock files for reproducible builds
- Implement security vulnerability scanning

**16. Development Environment**
- Use Laravel Sail for consistent Docker development
- Implement proper development scripts in `composer.json`
- Use concurrency for running multiple development processes
- Implement proper debugging tools (Laravel Pail, Debugbar)
- Use proper IDE configuration for consistent development

These enhanced rules reflect the modern Laravel ecosystem with full-stack JavaScript integration, emphasizing type safety, performance, accessibility, and developer experience while maintaining Laravel's conventions and best practices.